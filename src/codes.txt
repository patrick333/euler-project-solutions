id,ques_id,ques_name,code,lang,comment
1,20,"Factorial digit sum","from math import factorial

num=factorial(100)         
sumD=0    
while num!=0:
    num,sumD=num/10, sumD+num%10
 
print sumD ",python,NULL
2,11,"Largest product in a grid","int _tmain(int argc, _TCHAR* argv[])
{
	unsigned long long max=0;
	unsigned int a[20][20]={
		{8, 2, 22 ,97, 38 ,15, 00 ,40, 00 ,75, 04 ,5, 7 ,78, 52 ,12, 50 ,77, 91 ,8},
		{49, 49 ,99 ,40 ,17 ,81 ,18 ,57 ,60 ,87 ,17 ,40 ,98 ,43 ,69 ,48 ,04 ,56 ,62 ,00},
		{81, 49 ,31 ,73 ,55 ,79 ,14 ,29 ,93 ,71 ,40 ,67 ,53 ,88 ,30 ,03 ,49 ,13 ,36 ,65},
		{52 ,70 ,95 ,23 ,04 ,60 ,11 ,42 ,69 ,24 ,68 ,56 ,01 ,32 ,56 ,71 ,37 ,02 ,36 ,91},
		{22 ,31 ,16, 71 ,51 ,67 ,63 ,89 ,41 ,92 ,36 ,54 ,22 ,40 ,40 ,28 ,66 ,33 ,13 ,80},
		{24 ,47 ,32 ,60, 99 ,03 ,45 ,02 ,44 ,75 ,33 ,53 ,78 ,36 ,84 ,20 ,35 ,17 ,12 ,50},
		{32 ,98 ,81 ,28 ,64 ,23 ,67 ,10 ,26 ,38 ,40 ,67 ,59 ,54 ,70 ,66 ,18 ,38 ,64 ,70},
		{67 ,26 ,20 ,68 ,2 ,62 ,12 ,20 ,95 ,63 ,94 ,39 ,63 ,8 ,40 ,91 ,66 ,49 ,94 ,21},
		{24 ,55 ,58 ,5 ,66 ,73 ,99 ,26 ,97 ,17 ,78 ,78 ,96 ,83 ,14 ,88 ,34 ,89 ,63 ,72},
		{21 ,36 ,23 ,9 ,75 ,00 ,76 ,44 ,20 ,45 ,35 ,14 ,00 ,61 ,33 ,97 ,34 ,31 ,33 ,95},
		{78 ,17 ,53 ,28 ,22 ,75 ,31 ,67 ,15 ,94 ,3 ,80 ,04 ,62 ,16 ,14 ,9 ,53 ,56 ,92},
		{16 ,39 ,05 ,42 ,96 ,35 ,31 ,47 ,55 ,58 ,88 ,24 ,00 ,17 ,54 ,24 ,36 ,29 ,85 ,57},
		{86 ,56 ,00 ,48 ,35 ,71 ,89 ,07 ,05 ,44 ,44 ,37 ,44 ,60 ,21 ,58 ,51 ,54 ,17 ,58},
		{19 ,80 ,81 ,68 ,05 ,94 ,47 ,69 ,28 ,73 ,92 ,13 ,86 ,52 ,17 ,77 ,04 ,89 ,55 ,40},
		{04 ,52 ,8 ,83 ,97 ,35 ,99 ,16 ,07 ,97 ,57 ,32 ,16 ,26 ,26 ,79 ,33 ,27 ,98 ,66},
		{88 ,36 ,68 ,87 ,57 ,62 ,20 ,72 ,03 ,46 ,33 ,67 ,46 ,55 ,12 ,32 ,63 ,93 ,53 ,69},
		{04 ,42 ,16 ,73 ,38 ,25 ,39 ,11 ,24 ,94 ,72 ,18 ,8 ,46 ,29 ,32 ,40 ,62 ,76 ,36},
		{20 ,69 ,36 ,41 ,72 ,30 ,23 ,88 ,34 ,62 ,99 ,69 ,82 ,67 ,59 ,85 ,74 ,04 ,36 ,16},
		{20 ,73 ,35 ,29 ,78 ,31 ,90 ,01 ,74 ,31 ,49 ,71 ,48 ,86 ,81 ,16 ,23 ,57 ,05 ,54},
		{01 ,70 ,54, 71 ,83, 51 ,54, 69 ,16, 92 ,33, 48 ,61, 43 ,52, 01 ,89, 19 ,67, 48}
	};
	unsigned long long product=0;
	for(int i=0; i<20; i++){
		for(int j=0; j<16;j++)
		{
			product=a[i][j]*a[i][j+1]*a[i][j+2]*a[i][j+3];
			if(product>max){
				max=product;
				printf(""max changed to be: %llu. %d*%d*%d*%d \n"", max, a[i][j], a[i][j+1], a[i][j+2], a[i][j+3]);
			}
		}
	}
	printf(""max = %llu \n"", max);
	for(int i=0; i<16; i++){
		for(int j=0; j<20;j++)
		{
			product=a[i][j]*a[i+1][j]*a[i+2][j]*a[i+3][j];
			if(product>max){
				max=product;
				printf(""max changed to be: %llu. %d*%d*%d*%d \n"", max, a[i][j],a[i+1][j],a[i+2][j], a[i+3][j]   );
			}
		}
	}
	printf(""max = %llu \n"", max);
	for(int i=0; i<16; i++){
		for(int j=0; j<16;j++)
		{
			product=a[i][j]*a[i+1][j+1]*a[i+2][j+2]*a[i+3][j+3];
			if(product>max){
				max=product;
				printf(""max changed to be: %llu. %d*%d*%d*%d \n"", max, a[i][j],a[i+1][j+1],a[i+2][j+2], a[i+3][j+3] );
			}
		}
	}
		for(int i=0; i<16; i++){
		for(int j=3; j<20;j++)
		{
			product=a[i][j]*a[i+1][j-1]*a[i+2][j-2]*a[i+3][j-3];
			if(product>max){
				max=product;
				printf(""max changed to be: %llu. %d*%d*%d*%d \n"", max, a[i][j],a[i+1][j-1],a[i+2][j-2],a[i+3][j-3] );
			}
		}
	}
	printf(""finally, max = %llu"", max);
	return 0;
}",C++,NULL
3,12,"Highly divisible triangular number","from math import sqrt,floor
def getNum(N):
    num=1;
    for i in range(2, (int)(sqrt(N)) +1):
        numTemp=0
        while not N%i:
        #    print ""N%i"", N%i
            numTemp=numTemp+1
            N=N/i
        if numTemp:
            num=num*(numTemp+1)
        #print 'i=', i, ':',numTemp, num, N
    if N !=1:
        num*=2;
    return num
num=0
sum=0
i=1
while True:
    sum+=i
    i+=1
    num=getNum(sum)
    #print num
    if num>500:
        break
print sum",Python,NULL
4,13,"Large sum","a=[
37107287533902102798797998220837590246510135740250,
46376937677490009712648124896970078050417018260538,
74324986199524741059474233309513058123726617309629,
91942213363574161572522430563301811072406154908250,
23067588207539346171171980310421047513778063246676,
89261670696623633820136378418383684178734361726757,
28112879812849979408065481931592621691275889832738,
44274228917432520321923589422876796487670272189318,
47451445736001306439091167216856844588711603153276,
70386486105843025439939619828917593665686757934951,
62176457141856560629502157223196586755079324193331,
64906352462741904929101432445813822663347944758178,
92575867718337217661963751590579239728245598838407,
58203565325359399008402633568948830189458628227828,
80181199384826282014278194139940567587151170094390,
35398664372827112653829987240784473053190104293586
,86515506006295864861532075273371959191420517255829
,71693888707715466499115593487603532921714970056938
,54370070576826684624621495650076471787294438377604
,53282654108756828443191190634694037855217779295145
,36123272525000296071075082563815656710885258350721
,45876576172410976447339110607218265236877223636045
,17423706905851860660448207621209813287860733969412
,81142660418086830619328460811191061556940512689692
,51934325451728388641918047049293215058642563049483
,62467221648435076201727918039944693004732956340691
,15732444386908125794514089057706229429197107928209
,55037687525678773091862540744969844508330393682126
,18336384825330154686196124348767681297534375946515
,80386287592878490201521685554828717201219257766954
,78182833757993103614740356856449095527097864797581
,16726320100436897842553539920931837441497806860984
,48403098129077791799088218795327364475675590848030
,87086987551392711854517078544161852424320693150332
,59959406895756536782107074926966537676326235447210
,69793950679652694742597709739166693763042633987085
,41052684708299085211399427365734116182760315001271
,65378607361501080857009149939512557028198746004375
,35829035317434717326932123578154982629742552737307
,94953759765105305946966067683156574377167401875275
,88902802571733229619176668713819931811048770190271
,25267680276078003013678680992525463401061632866526
,36270218540497705585629946580636237993140746255962
,24074486908231174977792365466257246923322810917141
,91430288197103288597806669760892938638285025333403
,34413065578016127815921815005561868836468420090470
,23053081172816430487623791969842487255036638784583
,11487696932154902810424020138335124462181441773470
,63783299490636259666498587618221225225512486764533
,67720186971698544312419572409913959008952310058822
,95548255300263520781532296796249481641953868218774
,76085327132285723110424803456124867697064507995236
,37774242535411291684276865538926205024910326572967
,23701913275725675285653248258265463092207058596522
,29798860272258331913126375147341994889534765745501
,18495701454879288984856827726077713721403798879715
,38298203783031473527721580348144513491373226651381
,34829543829199918180278916522431027392251122869539
,40957953066405232632538044100059654939159879593635
,29746152185502371307642255121183693803580388584903
,41698116222072977186158236678424689157993532961922
,62467957194401269043877107275048102390895523597457
,23189706772547915061505504953922979530901129967519
,86188088225875314529584099251203829009407770775672
,11306739708304724483816533873502340845647058077308
,82959174767140363198008187129011875491310547126581
,97623331044818386269515456334926366572897563400500
,42846280183517070527831839425882145521227251250327
,55121603546981200581762165212827652751691296897789
,32238195734329339946437501907836945765883352399886
,75506164965184775180738168837861091527357929701337
,62177842752192623401942399639168044983993173312731
,32924185707147349566916674687634660915035914677504
,99518671430235219628894890102423325116913619626622
,73267460800591547471830798392868535206946944540724
,76841822524674417161514036427982273348055556214818
,97142617910342598647204516893989422179826088076852
,87783646182799346313767754307809363333018982642090
,10848802521674670883215120185883543223812876952786
,71329612474782464538636993009049310363619763878039
,62184073572399794223406235393808339651327408011116
,66627891981488087797941876876144230030984490851411
,60661826293682836764744779239180335110989069790714
,85786944089552990653640447425576083659976645795096
,66024396409905389607120198219976047599490197230297
,64913982680032973156037120041377903785566085089252
,16730939319872750275468906903707539413042652315011
,94809377245048795150954100921645863754710598436791
,78639167021187492431995700641917969777599028300699
,15368713711936614952811305876380278410754449733078
,40789923115535562561142322423255033685442488917353
,44889911501440648020369068063960672322193204149535
,41503128880339536053299340368006977710650566631954
,81234880673210146739058568557934581403627822703280
,82616570773948327592232845941706525094512325230608
,22918802058777319719839450180888072429661980811197
,77158542502016545090413245809786882778948721859617
,72107838435069186155435662884062257473692284509516
,20849603980134001723930671666823555245252804609722
,53503534226472524250874054075591789781264330331690
,]
sum=0;
for i in range(len(a)):
    sum+=a[i]
print sum
print str(sum)[0:10]",Python,NULL
5,14,"Longest Collatz sequence","max=1
iMax=1
maxN=1000000
#maxN=30
for i in range(1, maxN):
    j=i
    len=1
    while j!=1:
        if j%2==0:
            j=j/2
        else:
            j=3*j+1
        len+=1
    if(len>max):
        max=len 
        iMax=i
    #print i, len
print iMax, max",python,NULL
6,15,"Lattice paths","from math import factorial 
print (factorial(40)/factorial(20))/factorial(20)",Python,NULL
7,16,"Power digit sum","def numDigits(N):
    r=0
    while N:
        r,N=r+N%10, N/10
    return r
    
num=1
for i in range(100):
    num*=1024
print num    
print numDigits(num)
print numDigits(4495)",python,NULL
8,17,"Number letter counts","def numW(N):
    num=0
    num1=[3,3,5,4,4,  3,5,5,4,3]
    num15=[6,6,8,8,7,  7,9,8,8]
    num2=[3,6,6,5,5,  5,7,6,6]
    if N==0:
        num=0
    elif N<=10:
        num=num1[N-1]
    elif N<20:
        num=num15[N-11]
    elif N<100:
        num=num2[N/10-1]+numW((int) (N%10) )
    elif N<1000:
        num=num1[N/100-1]+7+ numW((int)(N%100))
        if N%100!=0:
            num+=3
    else: #N=1000
        num=11
    return num    

print numW(999), numW(19),numW(342), numW(115),numW(10),numW(200)
print numW(201), numW(20)
sum=0
for i in range(1,1001):
    sum+=numW(i)
print sum     
print range(10)",Python,NULL
9,18,"Maximum path sum I","d=[
[75],
[95,64],
[17,47,82],
[18,35,87,10],
[20,4,82,47,65],
[19,1,23,75,3,34],
[88,2,77,73,7,63,67],
[99,65,4,28,6,16,70,92],
[41,41,26,56,83,40,80,70,33],
[41,48,72,33,47,32,37,16,94,29],
[53,71,44,65,25,43,91,52,97,51,14],
[70,11,33,28,77,73,17,78,39,68,17,57],
[91,71,52,38,17,14,91,43,58,50,27,29,48],
[63,66,4,68,89,53,67,30,73,16,69,87,40,31],
[4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]]

result=[
[0],
[0,0],
[0,0,0],
[0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0,0],
[0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]  

def maxV(i,j):
    if i==14:
        global d
        return d[i][j]
    else:
        return d[i][j]+max( maxV(i+1,j), maxV(i+1,j+1)  )   
        
for i in range(14,-1,-1):   
    for j in range(0,i+1):
        result[i][j]=maxV(i,j)
        print result[i][j],
    print ''   

print result  ",python,NULL
10,19,"Counting Sundays","def leap(y):
    if y%100==0:
        if y%400==0:
            return True
        else:
            return False
    else:
        if y%4==0:
            return True
        else:
            return False
            
def d(y,m):#how many days for this month
    if m==4 or m==6 or m==9 or m==11:
        return 30
    elif m==2:
        if leap(y):
            return 29
        else:
            return 28
    else:
        return 31

 
Day=[[] for _ in range(101)]
for i in range(101):
    Day[i]=[0,0,0,0,0,0,0,0,0,0,0,0]
#0 for sunday, 1 for monday, etc.     
#print Day
       
num=0      
for y in range(1900, 2001):    
#for y in range(1900, 1921):
    for m in range(1,13):
        
        if y==1900 and m==1: #january 1       
            Day[y-1900][m-1]=1
        else:
            if m==1: #january 1
                Day[y-1900][0]=(d(y-1,12)+Day[y-1901][11])%7
            else:
                Day[y-1900][m-1]=(d(y,m-1)+Day[y-1900][m-2])%7
        print 'y=',y, ' m=', m, ' Day[y-1990][m-1]=',Day[y-1900][m-1]      
        if y>=1901 and Day[y-1900][m-1]==0:
            num+=1
print num  ",python,NULL
11,10,"Summation of primes","bool prime(long long d){
	if(d==2)return true;
	else if(d%2==0) return false;
	else {
		for(int i=3;i<=sqrt((double)d)  ;i+=2){
			if(d%i==0)
				return false;
		}
		return true;
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	long long num=2000000;
	//long long num=200;

	long long sum=2;
	for(long long i=3; i<num; i+=2){
		if(prime(i)){
			//printf(""%d "", i);
			sum+=i;
		}
	}

	printf(""sum=%lld \n"", sum);
	return 0;
}",c++,NULL
12,9,"Special Pythagorean triplet","int _tmain(int argc, _TCHAR* argv[])
{
	float limit=1000/ (2+sqrt( (float)2.0));
	printf(""limit=%f \n"", limit);

	int product=0;
	for(int a=1;a<limit; a++){
		for(int b=(int)ceil(limit); b<1000; b++){
			float result=a+b+ sqrt((float) (a*a+b*b)  )- 1000.0;
			if( abs(result)< 1.0e-10  ){
				product=a*b*(1000-a-b);
				printf(""the product is %d \n"", product);
			}
		}

	}

	return 0;
}",c++,NULL
13,8,"Largest product in a series","int _tmain(int argc, _TCHAR* argv[])
{
	string s=""73167176531330624919225119674426574742355349194934 \
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"";

	//string s=""7316717650"";

	char* c=new char[s.length()+1];
	strcpy(c, s.c_str());

	int* d=new int[s.length()];
	for(int i=0; i<(int)s.length(); i++){
		d[i]=c[i]-'0';
		//printf(""%d"", d[i]);
	}

	int* result=new int[s.length()-5];
	int maxIndex=0;int max=0;
	for(int i=0; i<=(int) s.length()-5; i++){
		result[i]=d[i]*d[i+1]*d[i+2]*d[i+3]*d[i+4];
		if(result[i]>max){
			maxIndex=i;
			max=result[i];
		}

		if(i<100)
			printf(""result[%d]=%d \n"", i, result[i]);
	}

	printf(""maxIndex=%d, d[maxIndex]=%d, d[maxIndex+1]=%d, d[maxIndex+2]=%d, d[maxIndex+3]=%d, d[maxIndex+4]=%d \n"", 
		maxIndex, d[maxIndex], d[maxIndex+1],d[maxIndex+2],d[maxIndex+3], d[maxIndex+4]);
	cout<<""the largest product is ""<<d[maxIndex]*d[maxIndex+1]*d[maxIndex+2]*d[maxIndex+3]*d[maxIndex+4]<<endl;

	return 0;
}",c++,NULL
14,7,"10001st prime","int _tmain(int argc, _TCHAR* argv[])
{
	long long num=0;
	int index=0;
	int maxIndex=10001;
	//int maxIndex=10;
	for(long long d=2; ;d++){
		if(prime(d)){
			index++;
			printf(""%d "", d);

			if(index>=maxIndex){
				num=d;
				break;
			}
		}
	}

	cout<<""the 10001st prime is ""<<num<<endl;

	return 0;
}",c++,NULL
15,5,"Smallest multiple","int _tmain(int argc, _TCHAR* argv[])
{
	int m[8];
	m[0]=2; 
	m[1]=3;
	m[2]=5;
	m[3]=7;
	m[4]=11;
	m[5]=13;
	m[6]=17;
	m[7]=19;
	int n[8]; //factors for 2, 3, 5,7, 11, 13, 17, 19

	for(int i=4; i<=20; i++){
		for(int j=0; j<8; j++){
			int factor=0; 
			int temp=i; 

			while(temp%m[j]==0){  //not while(temp%m[j])!!!!
				factor++;
				temp/=m[j];
			}
			if(factor>n[j])
				n[j]=factor;
		} //for j. 
	}

		for(int j=0; j<8; j++){
		printf(""j=%d, base=%d, factor=%d \n"", j, m[j], n[j]);
	}

	int num=1;
	for(int j=0; j<8; j++){
		num=num*(int ) pow( (float)m[j], n[j]);
	}

	cout<<""the smallest mutiple is ""<<num<<endl;
		
	return 0;
}",c++,NULL
16,4,"Largest palindrome product","def palin(n): 
	digits=[] 
	re=False 
	for i in range(0,6): 
		digits. append( (n/ pow(10, i) )%10) 
#		print ""digits["", i, ""] is "", digits[i]	 

	if digits[5]==0: 
		if digits[4]==digits[0] and digits[3]==digits[1]: 
			re=True; 
	else: 
		if digits[5]==digits[0] and digits[4]==digits[1] and digits[3]==digits[2]: 
			re=True 
	return re 

n=0 
max=0 
for i in range(100, 1000): 
	for j in range(i, 1000): 
		n=i*j 
		if palin(n) and n>max: 
			max=n 

if max>0: 
	print ""the largest palindrome is "", max",python,"method 1"
17,4,"Largest palindrome product","bool palin(int n){ //n has 5 or 6 digits.
	int digits[6];
	bool re=false;

	for(int i=0; i<6;i++){
		digits[i]=(n / (int) pow( (float)10,i)) %10;
		//cout<<""digits[""<<i<<""] is ""<<digits[i]<<endl;
	}

	if(digits[5]==0){
		if(digits[4]==digits[0] &&digits[3]==digits[1] )
			re=true;
	}
	else {
		if(digits[5]==digits[0] &&digits[4]==digits[1] && digits[3]==digits[2] )
			re=true;
	}

	return re;
}


int _tmain(int argc, _TCHAR* argv[])
{
	int n;
	int max=0;

	for(int i=100; i<=999; i++){
		for(int j=i; j<=999; j++)
		{
			n=i*j;
			//printf(""i=%d, j=%d, n=%d \n"", i,j,n);
			if(palin(n) && n>max)
				max=n;
		}
	}

	if(max>0)
		cout<<""the largest palindrome is ""<<max<<endl;
	return 0;
}",c++,"method 1"
18,4,"Largest palindrome product","bool palin(int n){ //n has 5 or 6 digits.
	int digits[6];
	int temp=n;
	bool re=false;

	for(int i=0; i<6;i++){
		digits[i]=temp%10;
		temp=temp/10;
	}

	if(digits[5]==0){
		if(digits[4]==digits[0] &&digits[3]==digits[1] )
			re=true;
	}
	else {
		if(digits[5]==digits[0] &&digits[4]==digits[1] && digits[3]==digits[2] )
			re=true;
	}

	return re;
}",c++,"method 2.
some improvements"
19,3,"Largest prime factor","bool prime(long long d){
	if(d==2)return true;
	else if(d%2==0) return false;
	else {
		for(int i=3;i<=floor(sqrt((double)d)) ;i+=2){
			if(d%i==0)
				return false;
		}
		return true;
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	//int num=210;
	long long num=600851475143 ;


	for(int i=3;;i+=2){
		printf(""i=%d num=%d \n"", i,num);

		while(num%i==0 && prime(i))
			num=num/i;

		if(prime(num))break;
	}
	printf(""Largest prime factor is %d \n"", num);

	return 0;
}",c++,NULL
20,13,"Large sum","<?php
$a=array(
""37107287533902102798797998220837590246510135740250"",
""46376937677490009712648124896970078050417018260538"",
""74324986199524741059474233309513058123726617309629"",
""91942213363574161572522430563301811072406154908250"",
""23067588207539346171171980310421047513778063246676"",
""89261670696623633820136378418383684178734361726757"",
""28112879812849979408065481931592621691275889832738"",
""44274228917432520321923589422876796487670272189318"",
""47451445736001306439091167216856844588711603153276"",
""70386486105843025439939619828917593665686757934951"",
""62176457141856560629502157223196586755079324193331"",
""64906352462741904929101432445813822663347944758178"",
""92575867718337217661963751590579239728245598838407"",
""58203565325359399008402633568948830189458628227828"",
""80181199384826282014278194139940567587151170094390"",
""35398664372827112653829987240784473053190104293586
"",""86515506006295864861532075273371959191420517255829
"",""71693888707715466499115593487603532921714970056938
"",""54370070576826684624621495650076471787294438377604
"",""53282654108756828443191190634694037855217779295145
"",""36123272525000296071075082563815656710885258350721
"",""45876576172410976447339110607218265236877223636045
"",""17423706905851860660448207621209813287860733969412
"",""81142660418086830619328460811191061556940512689692
"",""51934325451728388641918047049293215058642563049483
"",""62467221648435076201727918039944693004732956340691
"",""15732444386908125794514089057706229429197107928209
"",""55037687525678773091862540744969844508330393682126
"",""18336384825330154686196124348767681297534375946515
"",""80386287592878490201521685554828717201219257766954
"",""78182833757993103614740356856449095527097864797581
"",""16726320100436897842553539920931837441497806860984
"",""48403098129077791799088218795327364475675590848030
"",""87086987551392711854517078544161852424320693150332
"",""59959406895756536782107074926966537676326235447210
"",""69793950679652694742597709739166693763042633987085
"",""41052684708299085211399427365734116182760315001271
"",""65378607361501080857009149939512557028198746004375
"",""35829035317434717326932123578154982629742552737307
"",""94953759765105305946966067683156574377167401875275
"",""88902802571733229619176668713819931811048770190271
"",""25267680276078003013678680992525463401061632866526
"",""36270218540497705585629946580636237993140746255962
"",""24074486908231174977792365466257246923322810917141
"",""91430288197103288597806669760892938638285025333403
"",""34413065578016127815921815005561868836468420090470
"",""23053081172816430487623791969842487255036638784583
"",""11487696932154902810424020138335124462181441773470
"",""63783299490636259666498587618221225225512486764533
"",""67720186971698544312419572409913959008952310058822
"",""95548255300263520781532296796249481641953868218774
"",""76085327132285723110424803456124867697064507995236
"",""37774242535411291684276865538926205024910326572967
"",""23701913275725675285653248258265463092207058596522
"",""29798860272258331913126375147341994889534765745501
"",""18495701454879288984856827726077713721403798879715
"",""38298203783031473527721580348144513491373226651381
"",""34829543829199918180278916522431027392251122869539
"",""40957953066405232632538044100059654939159879593635
"",""29746152185502371307642255121183693803580388584903
"",""41698116222072977186158236678424689157993532961922
"",""62467957194401269043877107275048102390895523597457
"",""23189706772547915061505504953922979530901129967519
"",""86188088225875314529584099251203829009407770775672
"",""11306739708304724483816533873502340845647058077308
"",""82959174767140363198008187129011875491310547126581
"",""97623331044818386269515456334926366572897563400500
"",""42846280183517070527831839425882145521227251250327
"",""55121603546981200581762165212827652751691296897789
"",""32238195734329339946437501907836945765883352399886
"",""75506164965184775180738168837861091527357929701337
"",""62177842752192623401942399639168044983993173312731
"",""32924185707147349566916674687634660915035914677504
"",""99518671430235219628894890102423325116913619626622
"",""73267460800591547471830798392868535206946944540724
"",""76841822524674417161514036427982273348055556214818
"",""97142617910342598647204516893989422179826088076852
"",""87783646182799346313767754307809363333018982642090
"",""10848802521674670883215120185883543223812876952786
"",""71329612474782464538636993009049310363619763878039
"",""62184073572399794223406235393808339651327408011116
"",""66627891981488087797941876876144230030984490851411
"",""60661826293682836764744779239180335110989069790714
"",""85786944089552990653640447425576083659976645795096
"",""66024396409905389607120198219976047599490197230297
"",""64913982680032973156037120041377903785566085089252
"",""16730939319872750275468906903707539413042652315011
"",""94809377245048795150954100921645863754710598436791
"",""78639167021187492431995700641917969777599028300699
"",""15368713711936614952811305876380278410754449733078
"",""40789923115535562561142322423255033685442488917353
"",""44889911501440648020369068063960672322193204149535
"",""41503128880339536053299340368006977710650566631954
"",""81234880673210146739058568557934581403627822703280
"",""82616570773948327592232845941706525094512325230608
"",""22918802058777319719839450180888072429661980811197
"",""77158542502016545090413245809786882778948721859617
"",""72107838435069186155435662884062257473692284509516
"",""20849603980134001723930671666823555245252804609722
"",""53503534226472524250874054075591789781264330331690
"");

$sum=gmp_init($a[0]);
for($i=1;$i<count($a);$i++){
	$sum=gmp_add($sum,$a[$i]);
}
$sum=gmp_strval($sum);
echo ""The answer is: "", substr($sum,0,10).""\n"";
?>",php,NULL
21,14,"Longest Collatz sequence","$max=1;
$iMax=1;
$maxN=1000000;
#$maxN=30;
for($i=1;$i<$maxN;$i++){
	$j=$i;
	$len=1;
	while($j!==1){
		if($j%2===0)
			$j/=2;
		else
			$j=3*$j+1;
		$len+=1;	
	}
	if($len>$max){
	  $max=$len;
      $iMax=$i;
	}
	echo $iMax, "" "",$max, ""\n"";
}
#echo $iMax, $max;",php,"too slow to produce the result in 3 minutes."
